fragment stateFragment on State {
    block
    tiles: nodes(match: {kinds: ["Tile"]}) {
        coords: keys
        biome: value(match: {via: [{rel: "Biome"}]})
        seed: node(match: {kinds: ["Seed"], via: [{rel: "ProvidesEntropyTo", dir: IN}]}) {
          key
        }
    }
    seekers: nodes(match: {kinds: ["Seeker"]}) {
        key
        position: node(match: {kinds: ["Tile"], via:[{rel: "Location"}]}) {
            coords: keys
        }
        player: node(match: {kinds: ["Player"], via:[{rel: "Owner"}]}) {
            address: key
        }
        cornBalance: value(match: {via: [{rel: "Balance"}]})
    }
}

query GetState {
    game(id: "latest") {
        state {
            ...stateFragment
        }
    }
}

subscription OnState {
    state(gameID: "latest") {
        ...stateFragment
    }
}

# subscription watchTransactionByOwner($gameID: ID!, owner: String!) {
# 	transaction(gameID: $gameID, owner: $owner) {
# 		id
# 		status
# 	}
# }

mutation signin($gameID: ID!, $session: String!, $auth: String!) {
	signin(
		gameID: $gameID,
		session: $session,
		ttl: 1000,
		scope: "0xffffffff",
		authorization: $auth,
	)
}

mutation signout($gameID: ID!, $session: String!, $auth: String!) {
	signout(
		gameID: $gameID,
		session: $session,
		authorization: $auth,
	)
}

mutation dispatch($gameID: ID!, $action: String!, $auth: String!) {
	dispatch(
		gameID: $gameID,
		action: $action,        # encoded action bytes
		authorization: $auth    # session's signature of $action
	) {
		id
		status
	}
}

