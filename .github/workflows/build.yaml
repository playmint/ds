# this is a reusable workflow to build and deploy the crypt
# it is called by other workflows

on:
  workflow_call:
    inputs:
      DEPLOYMENT_ENVIRONMENT:
        description: Name of environment main/prod/test to deploy to
        required: true
        type: string
      FRONTEND_REPLICAS:
        description: Number of instances of frontend server
        default: 1
        type: number
      FRONTEND_IMAGE_NAME:
        description: ghcr image package name for the shell
        required: true
        default: playmint/ds-shell
        type: string
      CONTRACTS_IMAGE_NAME:
        description: ghcr image package name for the contracts
        required: true
        default: playmint/ds-contracts
        type: string
      SERVICES_IMAGE_NAME:
        description: ghcr image package name for cog services
        required: true
        default: playmint/ds-services
        type: string
      PLATFORMS:
        description: platforms for multiarch images
        required: true
        default: linux/arm64/v8,linux/amd64
        type: string

    secrets:
      AZURE_REGISTRY_URL:
        description: Docker login url for Azure Container Registry
        required: true
      AZURE_REGISTRY_USERNAME:
        description: Docker login username for Azure Container Registry
        required: true
      AZURE_REGISTRY_PASSWORD:
        description: Docker login password for Azure Container Registry
        required: true
      AZURE_CREDENTIALS:
        description: Azure credentials for deploying to Azure Container Service
        required: true
      AZURE_CLUSTER_NAME:
        description: Name of the Azure Container Service cluster
        required: true
      AZURE_CLUSTER_RESOURCE_GROUP:
        description: Name of the resource group where the cluster lives
        required: true
      UNITY_SERIAL:
        description: Unity licence serial
        required: true
      UNITY_EMAIL:
        description: Unity email for licence
        required: true
      UNITY_PASSWORD:
        description: Unity password for the licence
        required: true


env:
  REGISTRY: ghcr.io

jobs:

  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Create LFS file list
      run: git lfs ls-files -l | cut -d ' ' -f1 | sort > .lfs-assets-id
    - name: Restore LFS cache
      uses: actions/cache@v2
      id: lfs-cache
      with:
        path: .git/lfs
        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
    - name: Git LFS Pull
      run: |
        git lfs pull
    - name: Restore Library cache
      uses: actions/cache@v2
      with:
        path: DawnSeekersUnity/Library
        key: Library-ds
        restore-keys: |
          Library-ds
          Library-
    - name: Build ds
      uses: game-ci/unity-builder@v2
      env:
        UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        targetPlatform: WebGL
        projectPath: DawnSeekersUnity
        buildMethod: BuildScript.GitHubBuild
        allowDirtyBuild: true # allows for use of LFS cache
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: 'arm64,arm'
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ inputs.FRONTEND_IMAGE_NAME }}
    - name: Finalize Docker Metadata
      id: docker_tagging
      run: |
          echo "::set-output name=docker_tags::${{ env.REGISTRY }}/${{ inputs.FRONTEND_IMAGE_NAME }}:ds-${{ inputs.DEPLOYMENT_ENVIRONMENT }}-${GITHUB_SHA}"
    - name: Inspect Docker Metadata
      run: |
        echo "TAGS -> ${{ steps.docker_tagging.outputs.docker_tags }}"
        echo "LABELS ->  ${{ steps.meta.outputs.labels }}"
    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: frontend/Dockerfile
        push: true
        tags: ${{ steps.docker_tagging.outputs.docker_tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: ${{ inputs.PLATFORMS }}
        build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            NEXT_PUBLIC_DEFAULT_COG_WS_ENDPOINT=wss://services-ds-${{ inputs.DEPLOYMENT_ENVIRONMENT }}.dev.playmint.com/query
            NEXT_PUBLIC_DEFAULT_COG_HTTP_ENDPOINT=https://services-ds-${{ inputs.DEPLOYMENT_ENVIRONMENT }}.dev.playmint.com/query

  contracts:
    name: Contracts
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
    timeout-minutes: 60
    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: 'arm64,arm'
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ inputs.CONTRACTS_IMAGE_NAME }}
    - name: Finalize Docker Metadata
      id: docker_tagging
      run: |
        echo "::set-output name=docker_tags::${{ env.REGISTRY }}/${{ inputs.CONTRACTS_IMAGE_NAME }}:ds-${{ inputs.DEPLOYMENT_ENVIRONMENT }}-${GITHUB_SHA}"
    - name: Inspect Docker Metadata
      run: |
        echo "TAGS -> ${{ steps.docker_tagging.outputs.docker_tags }}"
        echo "LABELS ->  ${{ steps.meta.outputs.labels }}"
    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: contracts
        push: true
        tags: ${{ steps.docker_tagging.outputs.docker_tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: ${{ inputs.PLATFORMS }}
        build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  services:
    name: Services
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
    timeout-minutes: 60
    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: 'arm64,arm'
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ inputs.SERVICES_IMAGE_NAME }}
    - name: Finalize Docker Metadata
      id: docker_tagging
      run: |
        echo "::set-output name=docker_tags::${{ env.REGISTRY }}/${{ inputs.SERVICES_IMAGE_NAME }}:ds-${{ inputs.DEPLOYMENT_ENVIRONMENT }}-${GITHUB_SHA}"
    - name: Inspect Docker Metadata
      run: |
        echo "TAGS -> ${{ steps.docker_tagging.outputs.docker_tags }}"
        echo "LABELS ->  ${{ steps.meta.outputs.labels }}"
    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: contracts/lib/cog/services
        push: true
        tags: ${{ steps.docker_tagging.outputs.docker_tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: ${{ inputs.PLATFORMS }}
        build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
    - frontend
    - contracts
    - services
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Update deployment status
      uses: bobheadxi/deployments@v0.6.2
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: ${{ inputs.DEPLOYMENT_ENVIRONMENT }}
        ref: ${{ github.head_ref }}
    - name: Authenticate to Azure Container Service
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ secrets.AZURE_CLUSTER_NAME }}
        resource-group: ${{ secrets.AZURE_CLUSTER_RESOURCE_GROUP }}
    - name: Prepare helm
      uses: azure/setup-helm@v3
      with:
        version: '3.7.2'
    - name: Deploy to Azure
      env:
        CHART_VERSION: ${{ github.sha }}
        CHART_NAMESPACE: ds-${{ inputs.DEPLOYMENT_ENVIRONMENT }}
        CHART_VALUES: |-
          cluster:
            domain: dev.playmint.com
          version: ${{ github.sha }}
      run: |
        echo "${CHART_VALUES}" > /tmp/values.yaml
        helm upgrade --timeout "30m" --history-max 5 --install --wait ${CHART_NAMESPACE} ./chart --values /tmp/values.yaml --create-namespace -n "${CHART_NAMESPACE}"
    - name: Update deployment status
      uses: bobheadxi/deployments@v0.6.2
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        env_url: https://frontend-ds-${{ inputs.DEPLOYMENT_ENVIRONMENT }}.dev.playmint.com/
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
