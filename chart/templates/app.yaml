---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-services
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ $.Release.Name }}-services
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}-services
      annotations:
        gitsha: {{ $.Values.version | quote }}
    spec:
      containers:
        - name: services
          image: ghcr.io/playmint/cog-services:latest
          imagePullPolicy: Always
          env:
            - name: PORT
              value: "8080"
            - name: CHAIN_ID
              value: "1337"
            - name: SEQUENCER_PRIVATE_KEY
              value: "095a37ef5b5d87db7fe50551725cb64804c8c554868d3d729c0dd17f0e664c87"
            - name: SEQUENCER_PROVIDER_URL_HTTP
              value: "http://localhost:8545"
            - name: SEQUENCER_PROVIDER_URL_WS
              value: "ws://localhost:8545"
            - name: INDEXER_WATCH_PENDING
              value: "false"
            - name: INDEXER_PROVIDER_URL_HTTP
              value: "http://localhost:8545"
            - name: INDEXER_PROVIDER_URL_WS
              value: "ws://localhost:8545"
          command: ["/bin/ash"]
          args:
          - -eu
          - -c
          - |
            echo "waiting"
            /wait-for -it localhost:8545 -t 300
            echo "starting"
            exec /ds-node
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
        - name: contracts
          image: {{ printf "ghcr.io/playmint/ds-contracts:%s-%s" $.Release.Name $.Values.version }}
          imagePullPolicy: Always
          env:
          - name: DEPLOYER_PRIVATE_KEY
            value: "0x6335c92c05660f35b36148bbfb2105a68dd40275ebf16eff9524d487fb5d57a8"
          ports:
            - name: network
              containerPort: 8545
              protocol: TCP
        - name: sim
          image: {{ printf "ghcr.io/playmint/ds-contracts:%s-%s" $.Release.Name $.Values.version }}
          imagePullPolicy: Always
          command: ["/bin/ash"]
          args:
          - -eu
          - -c
          - |
            anvil --code-size-limit 9999999999999 --gas-limit 9999999999999999 --port 8546 --fork-url http://localhost:8545 --no-mining
          env:
          - name: DEPLOYER_PRIVATE_KEY
            value: "0x6335c92c05660f35b36148bbfb2105a68dd40275ebf16eff9524d487fb5d57a8"
          ports:
            - name: network
              containerPort: 8546
              protocol: TCP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-frontend
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ $.Release.Name }}-frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}-frontend
      annotations:
        gitsha: {{ $.Values.version | quote }}
    spec:
      containers:
        - name: frontend
          image: {{ printf "ghcr.io/playmint/ds-shell:%s-%s" $.Release.Name $.Values.version }}
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.Release.Name }}-services
  namespace: {{ $.Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ $.Release.Name }}-services

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.Release.Name }}-network
  namespace: {{ $.Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: network
      protocol: TCP
      name: network
  selector:
    app: {{ $.Release.Name }}-services

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.Release.Name }}-frontend
  namespace: {{ $.Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ $.Release.Name }}-frontend

---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: {{ $.Release.Name }}-services
  namespace: {{ $.Release.Namespace }}
spec:
  endpoints:
  - dnsName: "services-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"
    recordTTL: 60
    recordType: "CNAME"
    targets: ["{{ $.Values.cluster.domain }}"]

---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: {{ $.Release.Name }}-network
  namespace: {{ $.Release.Namespace }}
spec:
  endpoints:
  - dnsName: "network-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"
    recordTTL: 60
    recordType: "CNAME"
    targets: ["{{ $.Values.cluster.domain }}"]

---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: {{ $.Release.Name }}-frontend
  namespace: {{ $.Release.Namespace }}
spec:
  endpoints:
  - dnsName: "frontend-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"
    recordTTL: 60
    recordType: "CNAME"
    targets: ["{{ $.Values.cluster.domain }}"]

---
apiVersion: "gateway.solo.io/v1"
kind: VirtualService
metadata:
  name: {{ $.Release.Name }}-services
  namespace: {{ $.Release.Namespace }}
spec:
  virtualHost:
    domains: ["services-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"]
    routes:
    - matchers:
      - prefix: "/"
      routeAction:
        single:
          kube:
            ref:
              name: {{ $.Release.Name }}-services
              namespace: {{ $.Release.Namespace }}
            port: 80
      options:
        timeout: 120s
        upgrades:
        - websocket: {}
        retries:
          retryOn: gateway-error
          numRetries: 1
          perTryTimeout: 120s
  sslConfig:
    secretRef:
      name: "cluster-domain-certificate"
      namespace: "ingress-system"

---
apiVersion: "gateway.solo.io/v1"
kind: VirtualService
metadata:
  name: {{ $.Release.Name }}-network
  namespace: {{ $.Release.Namespace }}
spec:
  virtualHost:
    domains: ["network-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"]
    routes:
    - matchers:
      - prefix: "/"
      routeAction:
        single:
          kube:
            ref:
              name: {{ $.Release.Name }}-network
              namespace: {{ $.Release.Namespace }}
            port: 80
      options:
        timeout: 120s
        upgrades:
        - websocket: {}
        retries:
          retryOn: gateway-error
          numRetries: 1
          perTryTimeout: 120s
  sslConfig:
    secretRef:
      name: "cluster-domain-certificate"
      namespace: "ingress-system"

---
apiVersion: "gateway.solo.io/v1"
kind: VirtualService
metadata:
  name: {{ $.Release.Name }}-frontend
  namespace: {{ $.Release.Namespace }}
spec:
  virtualHost:
    domains: ["frontend-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"]
    routes:
    - matchers:
      - prefix: "/"
      routeAction:
        single:
          kube:
            ref:
              name: {{ $.Release.Name }}-frontend
              namespace: {{ $.Release.Namespace }}
            port: 80
      options:
        timeout: 120s
        retries:
          retryOn: gateway-error
          numRetries: 1
          perTryTimeout: 120s
  sslConfig:
    secretRef:
      name: "cluster-domain-certificate"
      namespace: "ingress-system"
