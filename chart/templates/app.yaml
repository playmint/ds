{{ define "frontend.config" }}
gameID: {{ $.Values.frontend.gameAddress | quote}}
build: {{ $.Values.version | quote }}
wsEndpoint: "wss://services-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}/query"
httpEndpoint: "https://services-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}/query"
{{ if eq $.Values.chain "anvil" }}
networkEndpoint: "https://network-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"
networkName: "{{ $.Release.Namespace }}"
networkID: "{{ $.Release.Namespace | mustRegexFind "[0-9]+$" | printf "223%02s" }}"
{{ else }}
networkEndpoint: {{ $.Values.sequencer.providerUrlHttp | quote }}
networkName: {{ $.Values.chain | quote }}
networkID: {{ $.Values.chainId | quote }}
{{ end }}
zonesAddress: {{ $.Values.frontend.zonesAddress | quote }}
tokenAddress: {{ $.Values.frontend.tokenAddress | quote }}
tonkEndpoint: "https://tonk-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"
wallets:
  metamask: true
  walletconnect: true
  burner: false
{{ end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-services
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ $.Release.Name }}-services
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}-services
      annotations:
        gitsha: {{ $.Values.version | quote }}
    spec:
      {{ if $.Values.nodePool }}
      tolerations:
      - key: "network"
        operator: "Equal"
        value: {{ $.Values.nodePool | quote }}
        effect: "NoSchedule"
      nodeSelector:
        network: {{ $.Values.nodePool | quote }}
      {{ end }}
      priorityClassName: {{ $.Values.priorityClassName | quote }}
      containers:
        - name: services
          {{ if $.Values.sequencer.image }}
          image: {{ $.Values.sequencer.image | quote }}
          {{ else }}
          image: {{ printf "ghcr.io/playmint/ds-services:%s" $.Values.version }}
          {{ end }}
          imagePullPolicy: Always
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

            # api listener
            - name: PORT
              value: "8080"

            # comma seperated list of keys, each key becomes a commit queue
            - name: SEQUENCER_PRIVATE_KEY
              value: {{ $.Values.sequencer.privateKey | quote }}

            # id of network contracts deployed to
            - name: CHAIN_ID
              value: "{{ $.Release.Namespace | mustRegexFind "[0-9]+$" | printf "223%02s" }}"

            # http rpc to send tx to
            - name: SEQUENCER_PROVIDER_URL_HTTP
              value: {{ $.Values.sequencer.providerUrlHttp | quote }}

            # never leave a transaction sitting in a building batch longer than this
            # bigger number means higher throughput but slower time for optimistic commits
            - name: SEQUENCER_BATCH_TIME_TARGET
              value: {{ $.Values.sequencer.batchTimeTarget | quote }}

            # the size (in gas) of the batch we would like to see per commit
            - name: SEQUENCER_BATCH_GAS_TARGET
              value: {{ $.Values.sequencer.batchGasTarget | quote }}

            # rough guess at expected tx size, used to make educated guessing while building batches
            - name: SEQUENCER_BATCH_GAS_AVERAGE
              value: {{ $.Values.sequencer.batchGasAverage | quote }}

            # percentage extra gas applied on top of estimates when item is placed into a batch
            - name: SEQUENCER_BATCH_ITEM_GAS_EXTRA
              value: {{ $.Values.sequencer.batchItemGasExtra | quote }}

            # how long do we wait to push things into a commit queue before just giving up
            - name: SEQUENCER_COMMIT_TIMEOUT
              value: {{ $.Values.sequencer.commitTimeout | quote }}

            # queue rate limtis per user session
            # sum of all queue values is the total number of in-flight connections before new ones will be rejected
            - name: SEQUENCER_SESSION_QUEUE_LIMIT # raising this lets connections deliver their requests, but they might get stale
              value: {{ $.Values.sequencer.sessionQueueLimit | quote }}
            - name: SEQUENCER_SESSION_PREP_LIMIT   # raising this number does more preprocessing at increase in CPU per user
              value: {{ $.Values.sequencer.sessionPrepLimit | quote }}
            - name: SEQUENCER_SESSION_READY_LIMIT # lower this number can make it more "fair" who gets picked for the batch
              value: {{ $.Values.sequencer.sessionReadyLimit | quote }}

            # what block limit are we working with
            - name: SEQUENCER_BLOCK_GAS_LIMIT
              value: {{ $.Values.sequencer.blockGasLimit | quote }}

            # set to debug for more indexing logs
            - name: SEQUENCER_LOG_LEVEL
              value: {{ $.Values.sequencer.logLevel | default "info" | quote }}

            # choice of agressiveness... "optimistic" or "safe"
            - name: SEQUENCER_COMMIT_MODE
              value: {{ $.Values.sequencer.commitMode | quote }}

            # number of blocks lower that the current head height to consider safe to
            # index 0=high-risk, 1=ok, 3=low-risk more maybe be needed on flakey chains
            - name: INDEXER_HEAD_OFFSET
              value: {{ $.Values.indexer.headOffset | quote }}

              # rpc endpoint
            - name: INDEXER_PROVIDER_URL_HTTP
              value: {{ $.Values.indexer.providerUrlHttp | quote }}

            # number of blocks before we consider an optimistic operation to be stale and eject it
            - name: INDEXER_PENDING_EXPIRY
              value: {{ $.Values.indexer.pendingExpiry | default "3" | quote }}

            # set to debug for more commit logs
            - name: INDEXER_LOG_LEVEL
              value: {{ $.Values.indexer.logLevel | default "info" | quote }}

            # contract addrs
            - name: INDEXER_GAME_ADDRESS
              value: {{ $.Values.indexer.gameAddress | quote }}
            - name: INDEXER_STATE_ADDRESS
              value: {{ $.Values.indexer.stateAddress | quote }}
            - name: INDEXER_ROUTER_ADDRESS
              value: {{ $.Values.indexer.routerAddress | quote }}

            # metrics
            - name: INDEXER_TELEMETRY_ENABLE
              value: "true"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://grafana-k8s-monitoring-grafana-agent.grafana.svc.cluster.local:4317"
            - name: OTEL_EXPORTER_OTLP_PROTOCOL
              value: "grpc"
            - name: OTEL_SERVICE_NAME
              value: "ds-services"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "deployment.environment=dev,service.namespace={{ $.Release.Namespace }},service.version={{ $.Values.version }},service.instance.id=$(POD_NAME)"

          command: ["/bin/ash"]
          args:
          - -eu
          - -c
          - |
            {{ if eq $.Values.chain "anvil" -}}
            echo "waiting"
            /wait-for -it localhost:8545 -t 300
            {{ end -}}
            echo "starting"
            exec /ds-node
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
        {{ if eq $.Values.chain "anvil" -}}
        - name: contracts
          image: {{ printf "ghcr.io/playmint/ds-contracts:%s" $.Values.version }}
          imagePullPolicy: Always
          env:
          - name: CHAIN_ID
            value: "{{ $.Release.Namespace | mustRegexFind "[0-9]+$" | printf "223%02s" }}"
          - name: EXTRA_ANVIL_ARGS
            value: "--prune-history --transaction-block-keeper 25 --gas-limit {{ $.Values.sequencer.blockGasLimit }}"
          - name: DEPLOYER_PRIVATE_KEY
            value: "0x6335c92c05660f35b36148bbfb2105a68dd40275ebf16eff9524d487fb5d57a8"
          - name: SERVICES_URL_HTTP
            value: "http://localhost:8080/query"
          - name: SERVICES_URL_WS
            value: "ws://localhost:8080/query"
          - name: MAP
            value: {{ $.Values.map | quote }}
          - name: TONK_URL_HTTP
            value: "http://{{ $.Release.Name}}-tonk.{{ $.Release.Namespace }}.svc.cluster.local"
          ports:
            - name: network
              containerPort: 8545
              protocol: TCP
          volumeMounts:
          - mountPath: "/root/.foundry/anvil/tmp"
            name: contracts-scratch
        {{ end -}}
      {{ if eq $.Values.chain "anvil" }}
      volumes:
      - name: contracts-scratch
        ephemeral:
          volumeClaimTemplate:
            spec:
              accessModes: [ "ReadWriteOnce" ]
              storageClassName: default
              resources:
                requests:
                  storage: 20Gi
      {{ end }}


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $.Release.Name }}-frontend
  namespace: {{ $.Release.Namespace }}
data:
  config.json: |
    {{ include "frontend.config" . | fromYaml | toJson }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-frontend
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ $.Release.Name }}-frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}-frontend
      annotations:
        gitsha: {{ $.Values.version | quote }}
        configsha: {{ include "frontend.config" . | sha256sum | quote }}
    spec:
      priorityClassName: {{ $.Values.priorityClassName | quote }}
      containers:
        - name: frontend
          {{ if $.Values.frontend.image }}
          image: {{ $.Values.frontend.image | quote }}
          {{ else }}
          image: {{ printf "ghcr.io/playmint/ds-shell:%s" $.Values.version }}
          {{ end }}
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: /usr/share/caddy/config.json
              name: config
              subPath: config.json
      volumes:
        - name: config
          configMap:
            name: {{ $.Release.Name }}-frontend

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.Release.Name }}-services
  namespace: {{ $.Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ $.Release.Name }}-services

{{ if eq $.Values.chain "anvil" }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.Release.Name }}-network
  namespace: {{ $.Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: network
      protocol: TCP
      name: network
  selector:
    app: {{ $.Release.Name }}-services
{{ end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.Release.Name }}-frontend
  namespace: {{ $.Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ $.Release.Name }}-frontend

---
apiVersion: "gateway.solo.io/v1"
kind: VirtualService
metadata:
  name: {{ $.Release.Name }}-services
  namespace: {{ $.Release.Namespace }}
spec:
  virtualHost:
    domains: ["services-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"]
    routes:
    - matchers:
      - prefix: "/"
      routeAction:
        single:
          kube:
            ref:
              name: {{ $.Release.Name }}-services
              namespace: {{ $.Release.Namespace }}
            port: 80
      options:
        timeout: 120s
        upgrades:
        - websocket: {}
        retries:
          retryOn: gateway-error
          numRetries: 1
          perTryTimeout: 120s
  sslConfig:
    sniDomains: ["services-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"]
    secretRef:
      name: "downstream-domain-certificate"
      namespace: "ingress-system"

{{ if eq $.Values.chain "anvil" }}
---
apiVersion: "gateway.solo.io/v1"
kind: VirtualService
metadata:
  name: {{ $.Release.Name }}-network
  namespace: {{ $.Release.Namespace }}
spec:
  virtualHost:
    domains: ["network-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"]
    routes:
    - matchers:
      - prefix: "/"
      routeAction:
        single:
          kube:
            ref:
              name: {{ $.Release.Name }}-network
              namespace: {{ $.Release.Namespace }}
            port: 80
      options:
        timeout: 120s
        upgrades:
        - websocket: {}
        retries:
          retryOn: gateway-error
          numRetries: 1
          perTryTimeout: 120s
  sslConfig:
    sniDomains: ["network-{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"]
    secretRef:
      name: "downstream-domain-certificate"
      namespace: "ingress-system"
{{ end }}

---
apiVersion: "gateway.solo.io/v1"
kind: VirtualService
metadata:
  name: {{ $.Release.Name }}-frontend
  namespace: {{ $.Release.Namespace }}
spec:
  virtualHost:
    domains: ["{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"]
    routes:
    - matchers:
      - prefix: "/"
      routeAction:
        single:
          kube:
            ref:
              name: {{ $.Release.Name }}-frontend
              namespace: {{ $.Release.Namespace }}
            port: 80
      options:
        timeout: 120s
        retries:
          retryOn: gateway-error
          numRetries: 1
          perTryTimeout: 120s
  sslConfig:
    sniDomains: ["{{ $.Release.Namespace }}.{{ $.Values.cluster.domain }}"]
    secretRef:
      name: "downstream-domain-certificate"
      namespace: "ingress-system"

