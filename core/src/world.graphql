fragment Item on Node {
    id
    name: annotation(name: "name") {
        id
        value
    }
    icon: annotation(name: "icon") {
        id
        value
    }
}

fragment ItemSlot on Edge {
    key
    balance: weight
    item: node {
        ...Item
    }
}

fragment Bag on Node {
    id
    key
    slots: edges(match: { kinds: ["Item"], via: { rel: "Balance" } }) {
        ...ItemSlot
    }
    owner: node(match: { via: { rel: "Owner" } }) {
        id
    }
    equipee: edge(match: { via: { rel: "Equip", dir: IN } }) {
        key
        node {
            id
        }
    }
}

fragment Location on Edge {
    id
    key # 0=LAST_LOCATION, 1=DEST_LOCATION
    time: weight # block at which location is valid
    tile: node {
        id
        coords: keys
        # building: node(match: { kinds: "Building", via: { rel: "Location", dir: IN } }) {
        #     id
        # }
        # atoms: edges(match: { kinds: ["atom"], via: { rel: "balance" } }) {
        #     key
        #     weight
        # }
    }
}

fragment WorldMobileUnit on Node {
    id
    key
    # there are always two location edges
    # the "departure" is the edge with key=0
    #     this points to the last known tile position recorded
    #     the weight of the departure edge is the block time of the last move
    prevLocation: edge(match: { kinds: "Tile", via: { rel: "Location", key: 0 } }) {
        ...Location
    }
    # the "destination" is the edge with key=1
    #     this points to the where the mobileUnit is heading.
    #     the weight of the destination edge is the time of arrival
    #     if the current block time >= arrival time then this is the CURRENT LOCATION
    #     but if not, you need to use the departure edge time to work out where we are
    nextLocation: edge(match: { kinds: "Tile", via: { rel: "Location", key: 1 } }) {
        ...Location
    }
    # who owns this mobileUnit
    owner: node(match: { kinds: "Player", via: { rel: "Owner" } }) {
        id
    }
    # owner assigned name
    name: annotation(name: "name") {
        value
    }
}

fragment WorldBuilding on Node {
    id
    kind: node(match: { kinds: "BuildingKind", via: { rel: "Is" } }) {
        ...BuildingKind
    }
    owner: node(match: { kinds: "Player", via: { rel: "Owner" } }) {
        id
    }
    timestamp: edge(match: { kinds: ["BlockNum"], via: { rel: "Has" } }) {
        blockNum: weight
    }
    gooReservoir: edges(match: { kinds: ["Atom"], via: { rel: "Balance" } }) {
        key
        weight
    }
    location: edge(match: { kinds: "Tile", via: { rel: "Location", key: 2 } }) {
        ...Location
    }
}

fragment WorldCombatSession on Node {
    id
    attackTile: edge(match: { kinds: "Tile", via: { rel: "Has", key: 0 } }) {
        startBlock: weight
        tile: node {
            id
        }
    }
    defenceTile: edge(match: { kinds: "Tile", via: { rel: "Has", key: 1 } }) {
        startBlock: weight
        tile: node {
            id
        }
    }
    sessionUpdates: annotations {
        name
        value
    }
    # flag is either 1 or 0 TODO: Use real boolean and if possible have the weight directly on `isFinalised`
    isFinalised: edge(match: { kinds: "CombatSession", via: { rel: "IsFinalised" } }) {
        flag: weight
    }
}

fragment WorldTile on Node {
    id
    # the keys break down the coords
    # there are 4 parts:
    #     coords[0] is zone and always 0 for now
    #     coords[1] is q
    #     coords[2] is r
    #     coords[3] is s
    coords: keys
    # tiles are either DISCOVERED or UNDISCOVERED
    # this is recorded on the biome edge weight for now
    # but this is temporary until we know what we need
    biome: value(match: { via: { rel: "Biome" } }) # 0=UNDISCOVERED, 1=DISCOVERED
    atoms: edges(match: { kinds: ["atom"], via: { rel: "balance" } }) {
        key
        weight
    }
}

fragment WorldPlayer on Node {
    id
    addr: key
}

fragment WorldState on State {
    block
    players: nodes(match: { kinds: "Player" }) {
        ...WorldPlayer
    }
    buildings: nodes(match: { kinds: "Building" }) {
        ...WorldBuilding
    }
    mobileUnits: nodes(match: { kinds: "MobileUnit" }) {
        ...WorldMobileUnit
    }
    sessions: nodes(match: { kinds: "CombatSession" }) {
        ...WorldCombatSession
    }
    bags: nodes(match: { kinds: "Bag" }) {
        ...Bag
    }
    items: nodes(match: { kinds: "Item" }) {
        ...Item
    }
}

fragment TilesState on State {
    tiles: nodes(match: { kinds: "Tile" }) {
        ...WorldTile
    }
}

fragment WorldStateWithTiles on State {
    ...WorldState
    ...TilesState
}

query GetTiles($gameID: ID!) {
    game(id: $gameID) {
        id
        state(simulated: true) {
            id
            ...TilesState
        }
    }
}

query GetWorld($gameID: ID!) {
    game(id: $gameID) {
        id
        state(simulated: true) {
            id
            ...WorldState
        }
    }
}
