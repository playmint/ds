fragment AssignedQuest on Edge {
    id
    key
    status: weight
    node {
        ...Quest
    }
}

fragment SelectedPlayer on Node {
    ...WorldPlayer

    zone: node(match: { ids: [$zonedPlayerID], via: { rel: "Owner", dir: IN } }) {
        quests: edges(match: { via: { rel: "HasQuest", dir: OUT } }) {
            ...AssignedQuest
        }
    }

    tokens: edges(match: { kinds: "OwnedToken", via: { rel: "Owner", dir: IN } }) {
        token: node {
            id
            info: edge(match: { kinds: "Item", via: { rel: "Balance", dir: OUT } }) {
                balance: weight
                item: node {
                    ...Item
                }
            }
        }
    }
}

query GetSelectedPlayer($gameID: ID!, $id: String!, $zonedPlayerID: String!) {
    game(id: $gameID) {
        id
        state(simulated: true) {
            id
            player: node(match: { kinds: "Player", ids: [$id] }) {
                ...SelectedPlayer
            }
        }
    }
}
