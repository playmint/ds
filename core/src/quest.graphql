fragment Quest on Node {
    id
    name: annotation(name: "name") {
        value
    }
    description: annotation(name: "description") {
        value
    }
    location: node(match: { kinds: "Tile" }) {
        id
        coords: keys
    }
    tasks: edges(match: { kinds: "Task", via: { rel: "HasTask", dir: OUT } }) {
        key
        node {
            ...QuestTask
        }
    }
}

# TODO: Break QuestTasks into the kinds. Can I do a discriminated union using the keys?
# HACK: combatstate is set on a 'Has' edge pointing from a task to itself
# https://spin.atomicobject.com/2019/04/15/discriminated-unions/

fragment QuestTask on Node {
    id
    name: annotation(name: "name") {
        value
    }
    location: node(match: { kinds: "Tile" }) {
        id
        coords: keys
    }
    itemSlot: edge(match: { kinds: "Item" }) {
        balance: weight
        item: node {
            id
        }
    }
    message: annotation(name: "message") {
        value
    }
    buildingKind: node(match: { kinds: "BuildingKind" }) {
        id
    }
    quest: node(match: { kinds: "Quest", via: { rel: "HasQuest", dir: OUT } }) {
        id
    }
    combatState: edge(match: { kinds: "Task", via: { rel: "Has", dir: OUT } }) {
        value: weight
    }
    unitStats: edges(match: { kinds: "Atom", via: { rel: "Balance", dir: OUT } }) {
        key
        weight
    }
    craftItems: edges(match: { kinds: "Item" }) {
        key
        item: node {
            id
        }
    }
}
