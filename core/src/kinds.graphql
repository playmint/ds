fragment BuildingKind on Node {
    id
    name: annotation(name: "name") {
        value
    }
    description: annotation(name: "description") {
        value
    }
    model: annotation(name: "model") {
        value
    }
    # materials are the construction costs to build
    materials: edges(match: { kinds: ["Item"], via: { rel: "Material" } }) {
        ...ItemSlot
    }
    # inputs (if set) are the registered crafting inputs
    inputs: edges(match: { kinds: ["Item"], via: { rel: "Input" } }) {
        ...ItemSlot
    }
    # outputs (if set) are the registered crafting outputs
    outputs: edges(match: { kinds: ["Item"], via: { rel: "Output" } }) {
        ...ItemSlot
    }
    # who deployed this building kind
    owner: node(match: { kinds: "Player", via: { rel: "Owner" } }) {
        id
    }
}

fragment PartKind on Node {
    id
    name: annotation(name: "name") {
        value
    }
    model: annotation(name: "model") {
        value
    }
    actions: edges(match: { kinds: "PartActionDef" }) {
        key
        node {
            name: annotation(name: "name") {
                value
            }
            args: edges(match: { kinds: "PartActionArgDef" }) {
                key
                type: weight
                node {
                    name: annotation(name: "name") {
                        value
                    }
                    list: data(name: "list") {
                        value
                    }
                    length: data(name: "length") {
                        value
                    }
                }
            }
        }
    }
    parts: edges(match: { kinds: "PartRefDef", via: { rel: "PartRef" } }) {
        key
        node {
            name: annotation(name: "name") {
                value
            }
            kind: node(match: { kinds: "PartKind", via: { rel: "Has" } }) {
                id
            }
        }
    }
    state: edges(match: { kinds: "PartStateDef" }) {
        key
        type: weight
        node {
            name: annotation(name: "name") {
                value
            }
            list: data(name: "list") {
                value
            }
            length: data(name: "length") {
                value
            }
        }
    }
}

query GetAvailableBuildingKinds($gameID: ID!) {
    game(id: $gameID) {
        id
        state(simulated: true) {
            id
            kinds: nodes(match: { kinds: "BuildingKind" }) {
                ...BuildingKind
            }
        }
    }
}
