fragment BuildingKind on Node {
    id
    name: annotation(name: "name") {
        value
    }
    description: annotation(name: "description") {
        value
    }
    model: annotation(name: "model") {
        value
    }
    # materials are the construction costs to build
    materials: edges(match: { kinds: ["Item"], via: { rel: "Material" } }) {
        ...ItemSlot
    }
    # inputs (if set) are the registered crafting inputs
    inputs: edges(match: { kinds: ["Item"], via: { rel: "Input" } }) {
        ...ItemSlot
    }
    # outputs (if set) are the registered crafting outputs
    outputs: edges(match: { kinds: ["Item"], via: { rel: "Output" } }) {
        ...ItemSlot
    }
    # who deployed this building kind
    owner: node(match: { kinds: "Player", via: { rel: "Owner" } }) {
        id
    }
    # implementation of this building kind
    implementation: node(match: { kinds: "Extension" }) {
        id
    }
}

query GetAvailableBuildingKinds($gameID: ID!) {
    game(id: $gameID) {
        id
        state(simulated: true) {
            id
            kinds: nodes(match: { kinds: "BuildingKind" }) {
                ...BuildingKind
            }
        }
    }
}
